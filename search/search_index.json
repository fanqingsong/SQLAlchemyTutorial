{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>For full documentation visit sqlalchemy.org.</p>"},{"location":"#sqlalchemys-philosophy","title":"SQLALCHEMY'S PHILOSOPHY","text":"<pre><code>SQL databases behave less like object collections the more size and performance start to matter; object collections behave less like tables and rows the more abstraction starts to matter. SQLAlchemy aims to accommodate both of these principles.\n\nSQLAlchemy considers the database to be a relational algebra engine, not just a collection of tables. Rows can be selected from not only tables but also joins and other select statements; any of these units can be composed into a larger structure. SQLAlchemy's expression language builds on this concept from its core.\n\nSQLAlchemy is most famous for its object-relational mapper (ORM), an optional component that provides the data mapper pattern, where classes can be mapped to the database in open ended, multiple ways - allowing the object model and database schema to develop in a cleanly decoupled way from the beginning.\n\nSQLAlchemy's overall approach to these problems is entirely different from that of most other SQL / ORM tools, rooted in a so-called complimentarity- oriented approach; instead of hiding away SQL and object relational details behind a wall of automation, all processes are fully exposed within a series of composable, transparent tools. The library takes on the job of automating redundant tasks while the developer remains in control of how the database is organized and how SQL is constructed.\n\nThe main goal of SQLAlchemy is to change the way you think about databases and SQL!\n</code></pre>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ncode/         # code example        \ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"0_install/","title":"0. Install","text":"<p>For full documentation visit sqlalchemy.org.</p>"},{"location":"0_install/#commands","title":"Commands","text":"<ul> <li><code>pip install sqlalchemy</code> - install package</li> </ul>"},{"location":"1_insert/","title":"1. Insert","text":"<p>For full documentation visit sqlalchemy.org.</p>"},{"location":"1_insert/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nsession.commit()\nsession.close()\n</code></pre>"},{"location":"1_insert/#output","title":"Output","text":"<pre><code>2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine [no key 0.00006s] ()\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('5', 'Bob')\n2023-03-28 23:01:19,725 INFO sqlalchemy.engine.Engine COMMIT\n</code></pre>"},{"location":"2_0_query_api/","title":"2.0 Query with API","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>get started</p>"},{"location":"2_0_query_api/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nsession.commit()\nuser = session.query(User).filter(User.id=='5').one()\nprint('type:', type(user))\nprint('name:', user.name)\nsession.close()\n</code></pre>"},{"location":"2_0_query_api/#output","title":"Output","text":"<pre><code>2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine [no key 0.00005s] ()\n2023-03-28 23:15:44,854 INFO sqlalchemy.engine.Engine COMMIT\nC:\\Users\\fannnqin\\PycharmProjects\\test\\query.py:11: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\nBase = declarative_base()\n2023-03-28 23:15:44,871 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:15:44,872 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-03-28 23:15:44,872 INFO sqlalchemy.engine.Engine [generated in 0.00012s] ('5', 'Bob')\n2023-03-28 23:15:44,872 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-28 23:15:44,873 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:15:44,874 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name \nFROM user \nWHERE user.id = ?\n2023-03-28 23:15:44,874 INFO sqlalchemy.engine.Engine [generated in 0.00009s] ('5',)\ntype: &lt;class '__main__.User'&gt;\nname: Bob\n2023-03-28 23:15:44,875 INFO sqlalchemy.engine.Engine ROLLBACK\n</code></pre>"},{"location":"2_1_query_sql/","title":"2.1 Query with SQL","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>get started</p>"},{"location":"2_1_query_sql/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column, text\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nsession.commit()\npprint(\"---------------------------------\")\nwith engine.connect() as connection:\nresult = connection.execute(text(\"select * from user\"))\nprint(result)\nfor row in result:\nprint(row)\n</code></pre>"},{"location":"2_1_query_sql/#output","title":"Output","text":"<pre><code>2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [no key 0.00006s] ()\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [generated in 0.00011s] ('5', 'Bob')\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name \nFROM user \nWHERE user.id = ?\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [generated in 0.00009s] ('5',)\ntype: &lt;class '__main__.User'&gt;\nname: Bob\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine ROLLBACK\n'---------------------------------'\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine select * from user\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ()\n&lt;sqlalchemy.engine.cursor.CursorResult object at 0x000001BA4381E320&gt;\n('5', 'Bob')\n2023-04-01 10:10:54,797 INFO sqlalchemy.engine.Engine ROLLBACK\n</code></pre>"},{"location":"2_3_query_select/","title":"2.3 Query with Select","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>get started</p>"},{"location":"2_3_query_select/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import select\nfrom sqlalchemy import Column, text\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nsession.commit()\npprint(\"---------------------------------\")\nstmt = select(User).where(User.name.in_([\"Bob\", \"sandy\"]))\nfor user in session.scalars(stmt):\nprint(user.__dict__)\n</code></pre>"},{"location":"2_3_query_select/#output","title":"Output","text":"<pre><code>2023-04-01 22:14:50,337 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-04-01 22:14:50,338 INFO sqlalchemy.engine.Engine [no key 0.00006s] ()\n2023-04-01 22:14:50,339 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 22:14:50,339 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:14:50,341 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-04-01 22:14:50,341 INFO sqlalchemy.engine.Engine [generated in 0.00013s] ('5', 'Bob')\n2023-04-01 22:14:50,341 INFO sqlalchemy.engine.Engine COMMIT\n'---------------------------------'\n2023-04-01 22:14:50,342 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:14:50,342 INFO sqlalchemy.engine.Engine SELECT user.id, user.name \nFROM user \nWHERE user.name IN (?, ?)\n2023-04-01 22:14:50,342 INFO sqlalchemy.engine.Engine [generated in 0.00012s] ('Bob', 'sandy')\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x000001FA22DD34C0&gt;, 'name': 'Bob', 'id': '5'}\n\nProcess finished with exit code 0\n</code></pre>"},{"location":"3_delete/","title":"3. Delete","text":"<p>For full documentation visit sqlalchemy.org.</p>"},{"location":"3_delete/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nsession.commit()\nuser = session.query(User).filter(User.id=='5').one()\nprint('type:', type(user))\nprint('name:', user.name)\nsession.delete(user)\nsession.commit()\nusers = session.query(User).filter(User.id=='5').all()\nprint('users:', users)\nsession.close()\n</code></pre>"},{"location":"3_delete/#output","title":"Output","text":"<pre><code>2023-03-29 16:51:44,043 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-29 16:51:44,043 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-03-29 16:51:44,043 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-29 16:51:44,044 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-03-29 16:51:44,044 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-29 16:51:44,044 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-03-29 16:51:44,044 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()\n2023-03-29 16:51:44,044 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-29 16:51:44,045 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-29 16:51:44,046 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-03-29 16:51:44,046 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('5', 'Bob')\n2023-03-29 16:51:44,046 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-29 16:51:44,046 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-29 16:51:44,048 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name \nFROM user \nWHERE user.id = ?\n2023-03-29 16:51:44,048 INFO sqlalchemy.engine.Engine [generated in 0.00008s] ('5',)\ntype: &lt;class '__main__.User'&gt;\nname: Bob\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine DELETE FROM user WHERE user.id = ?\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine [generated in 0.00007s] ('5',)\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name \nFROM user \nWHERE user.id = ?\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine [cached since 0.001302s ago] ('5',)\nusers: []\n2023-03-29 16:51:44,049 INFO sqlalchemy.engine.Engine ROLLBACK\n\nProcess finished with exit code 0\n</code></pre>"},{"location":"4_0_relationship_back_populates/","title":"4.0 Relationship with back_populates","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>relationship.</p> <p>back_populates.</p>"},{"location":"4_0_relationship_back_populates/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass Parent(Base):\n__tablename__ = \"parent_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nchildren = relationship(\"Child\", back_populates=\"parent\")\nclass Child(Base):\n__tablename__ = \"child_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nparent_id = Column(Integer, ForeignKey(\"parent_table.id\"))\nparent = relationship(\"Parent\", back_populates=\"children\")\nengine = create_engine(\"sqlite://\", echo=True)\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(engine)()\np = Parent()\np.name = \"father\"\nc1 = Child()\nc1.name = \"son\"\np.children = [c1]\nsession.add_all([p, c1])\nsession.commit()\np = session.query(Parent).all()\npprint(\"-------- p[0] ----------\")\npprint(p[0])\npprint(p[0].__dict__)\npprint(\"-------- p[0].children[0] ----------\")\npprint(p[0].children[0])\npprint(p[0].children[0].__dict__)\nc = session.query(Child).all()\npprint(\"-------- c[0] ----------\")\npprint(c[0])\npprint(c[0].__dict__)\npprint(\"-------- c[0].parent ----------\")\npprint(c[0].parent)\npprint(c[0].parent.__dict__)\npprint(\"-------- c[0].parent.children[0] ----------\")\npprint(c[0].parent.children[0])\npprint(c[0].parent.children[0].__dict__)\n</code></pre>"},{"location":"4_0_relationship_back_populates/#output","title":"Output","text":"<pre><code>2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"parent_table\")\n2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"child_table\")\n2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-28 23:22:23,422 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine INSERT INTO parent_table (name) VALUES (?)\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine [generated in 0.00011s] ('father',)\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine INSERT INTO child_table (name, parent_id) VALUES (?, ?)\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('son', 8)\n2023-03-28 23:22:23,424 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine SELECT parent_table.id AS parent_table_id, parent_table.name AS parent_table_name \nFROM parent_table\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine [generated in 0.00011s] ()\n'-------- p[0] ----------'\n&lt;__main__.Parent object at 0x0000020F9489A3A0&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000020F94854940&gt;,\n'id': 1,\n'name': 'father'}\n'-------- p[0].children[0] ----------'\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine SELECT child_table.id AS child_table_id, child_table.name AS child_table_name, child_table.parent_id AS child_table_parent_id \nFROM child_table \nWHERE ? = child_table.parent_id\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine [generated in 0.00010s] (1,)\n&lt;__main__.Child object at 0x0000020F948B3040&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000020F9486AD60&gt;,\n'id': 1,\n'name': 'son',\n'parent_id': 1}\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine SELECT child_table.id AS child_table_id, child_table.name AS child_table_name, child_table.parent_id AS child_table_parent_id \nFROM child_table\n2023-03-28 23:22:23,431 INFO sqlalchemy.engine.Engine [generated in 0.00008s] ()\n'-------- c[0] ----------'\n&lt;__main__.Child object at 0x0000020F948B3040&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000020F9486AD60&gt;,\n'id': 1,\n'name': 'son',\n'parent_id': 1}\n'-------- c[0].parent ----------'\n&lt;__main__.Parent object at 0x0000020F9489A3A0&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000020F94854940&gt;,\n'children': [&lt;__main__.Child object at 0x0000020F948B3040&gt;],\n'id': 1,\n'name': 'father'}\n'-------- c[0].parent.children[0] ----------'\n&lt;__main__.Child object at 0x0000020F948B3040&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000020F9486AD60&gt;,\n'id': 1,\n'name': 'son',\n'parent': &lt;__main__.Parent object at 0x0000020F9489A3A0&gt;,\n'parent_id': 1}\n</code></pre>"},{"location":"4_1_relationship_backref/","title":"4.1 Relationship with backref","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>relationship</p> <p>backref</p> <p>directed_graph</p> <p>Although this is one simple notation for create relationship but it is legacy, proposed solution is back_populates. link</p>"},{"location":"4_1_relationship_backref/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass Parent(Base):\n__tablename__ = \"parent_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\n# children = relationship(\"Child\", back_populates=\"parent\")\nclass Child(Base):\n__tablename__ = \"child_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nparent_id = Column(Integer, ForeignKey(\"parent_table.id\"))\nparent = relationship(\"Parent\", backref=\"children\")\nengine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(engine)()\np = Parent()\np.name = \"father\"\nc1 = Child()\nc1.name = \"son\"\np.children = [c1]\nsession.add_all([p, c1])\nsession.commit()\np = session.query(Parent).all()\npprint(\"-------- p[0] ----------\")\npprint(p[0])\npprint(p[0].__dict__)\npprint(\"-------- p[0].children[0] ----------\")\npprint(p[0].children[0])\npprint(p[0].children[0].__dict__)\nc = session.query(Child).all()\npprint(\"-------- c[0] ----------\")\npprint(c[0])\npprint(c[0].__dict__)\npprint(\"-------- c[0].parent ----------\")\npprint(c[0].parent)\npprint(c[0].parent.__dict__)\npprint(\"-------- c[0].parent.children[0] ----------\")\npprint(c[0].parent.children[0])\npprint(c[0].parent.children[0].__dict__)\n</code></pre>"},{"location":"4_1_relationship_backref/#output","title":"Output","text":"<pre><code>2023-03-31 22:29:48,276 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 22:29:48,276 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"node\")\n2023-03-31 22:29:48,276 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"node\")\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"edge\")\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"edge\")\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine \nCREATE TABLE node (\n    node_id INTEGER NOT NULL, \n    PRIMARY KEY (node_id)\n)\n\n\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine [no key 0.00006s] ()\n2023-03-31 22:29:48,277 INFO sqlalchemy.engine.Engine \nCREATE TABLE edge (\n    lower_id INTEGER NOT NULL, \n    higher_id INTEGER NOT NULL, \n    PRIMARY KEY (lower_id, higher_id), \n    FOREIGN KEY(lower_id) REFERENCES node (node_id), \n    FOREIGN KEY(higher_id) REFERENCES node (node_id)\n)\n\n\n2023-03-31 22:29:48,278 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()\n2023-03-31 22:29:48,278 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-31 22:29:48,282 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 22:29:48,283 INFO sqlalchemy.engine.Engine INSERT INTO node (node_id) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL) RETURNING node_id\n2023-03-31 22:29:48,283 INFO sqlalchemy.engine.Engine [generated in 0.00009s (insertmanyvalues)] ()\n2023-03-31 22:29:48,284 INFO sqlalchemy.engine.Engine INSERT INTO edge (lower_id, higher_id) VALUES (?, ?)\n2023-03-31 22:29:48,284 INFO sqlalchemy.engine.Engine [generated in 0.00010s] [(1, 2), (2, 1), (2, 3), (2, 4), (1, 5), (5, 6)]\n2023-03-31 22:29:48,284 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-31 22:29:48,285 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 22:29:48,287 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,287 INFO sqlalchemy.engine.Engine [generated in 0.00009s] (5,)\n2023-03-31 22:29:48,287 INFO sqlalchemy.engine.Engine SELECT edge.lower_id AS edge_lower_id, edge.higher_id AS edge_higher_id \nFROM edge \nWHERE edge.lower_id = ?\n2023-03-31 22:29:48,288 INFO sqlalchemy.engine.Engine [generated in 0.00008s] (5,)\n2023-03-31 22:29:48,288 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,288 INFO sqlalchemy.engine.Engine [cached since 0.001406s ago] (6,)\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine SELECT edge.lower_id AS edge_lower_id, edge.higher_id AS edge_higher_id \nFROM edge \nWHERE edge.higher_id = ?\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine [generated in 0.00008s] (5,)\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine [cached since 0.002424s ago] (1,)\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,289 INFO sqlalchemy.engine.Engine [cached since 0.002752s ago] (2,)\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine SELECT edge.lower_id AS edge_lower_id, edge.higher_id AS edge_higher_id \nFROM edge \nWHERE edge.higher_id = ?\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine [cached since 0.001027s ago] (2,)\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine SELECT edge.lower_id AS edge_lower_id, edge.higher_id AS edge_higher_id \nFROM edge \nWHERE edge.lower_id = ?\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine [cached since 0.002493s ago] (2,)\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,290 INFO sqlalchemy.engine.Engine [cached since 0.00361s ago] (3,)\n2023-03-31 22:29:48,291 INFO sqlalchemy.engine.Engine SELECT node.node_id AS node_node_id \nFROM node \nWHERE node.node_id = ?\n2023-03-31 22:29:48,291 INFO sqlalchemy.engine.Engine [cached since 0.003911s ago] (4,)\n</code></pre>"},{"location":"4_2_relationship_cascade/","title":"4.2 Relationship with cascade","text":"<p>For full documentation visit sqlalchemy.org.</p>"},{"location":"4_2_relationship_cascade/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass Parent(Base):\n__tablename__ = \"parent_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nchildren = relationship(\n\"Child\",\nback_populates=\"parent\",\ncascade=\"all, delete, save-update\"\n)\nclass Child(Base):\n__tablename__ = \"child_table\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nparent_id = Column(Integer, ForeignKey(\"parent_table.id\", ondelete=\"CASCADE\"))\nparent = relationship(\"Parent\", back_populates=\"children\")\nengine = create_engine(\"sqlite:///.file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(engine)()\np = Parent()\np.name = \"father\"\nc1 = Child()\nc1.name = \"son\"\np.children = [c1]\nsession.add_all([p])\nsession.commit()\np = session.query(Parent).all()\npprint(\"-------- p ----------\")\npprint(p)\npprint(\"-------- p[0] ----------\")\npprint(p[0])\npprint(p[0].__dict__)\n# session.delete(p[0].children[0])\nsession.delete(p[0])\nsession.commit()\np = session.query(Parent).all()\npprint(\"-------- p ----------\")\npprint(p)\nc = session.query(Child).all()\npprint(\"-------- c ----------\")\npprint(c)\n</code></pre>"},{"location":"4_2_relationship_cascade/#output","title":"Output","text":"<pre><code>2023-03-31 23:29:18,959 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 23:29:18,959 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"parent_table\")\n2023-03-31 23:29:18,959 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"parent_table\")\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"child_table\")\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"child_table\")\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine \nCREATE TABLE parent_table (\n    id INTEGER NOT NULL, \n    name VARCHAR, \n    PRIMARY KEY (id)\n)\n\n\n2023-03-31 23:29:18,960 INFO sqlalchemy.engine.Engine [no key 0.00005s] ()\n2023-03-31 23:29:18,967 INFO sqlalchemy.engine.Engine \nCREATE TABLE child_table (\n    id INTEGER NOT NULL, \n    name VARCHAR, \n    parent_id INTEGER, \n    PRIMARY KEY (id), \n    FOREIGN KEY(parent_id) REFERENCES parent_table (id) ON DELETE CASCADE\n)\n\n\n2023-03-31 23:29:18,967 INFO sqlalchemy.engine.Engine [no key 0.00015s] ()\n2023-03-31 23:29:18,971 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-31 23:29:18,974 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 23:29:18,975 INFO sqlalchemy.engine.Engine INSERT INTO parent_table (name) VALUES (?)\n2023-03-31 23:29:18,975 INFO sqlalchemy.engine.Engine [generated in 0.00011s] ('father',)\n2023-03-31 23:29:18,976 INFO sqlalchemy.engine.Engine INSERT INTO child_table (name, parent_id) VALUES (?, ?)\n2023-03-31 23:29:18,976 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('son', 1)\n2023-03-31 23:29:18,977 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-31 23:29:18,980 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 23:29:18,981 INFO sqlalchemy.engine.Engine SELECT parent_table.id AS parent_table_id, parent_table.name AS parent_table_name \nFROM parent_table\n2023-03-31 23:29:18,981 INFO sqlalchemy.engine.Engine [generated in 0.00009s] ()\n'-------- p ----------'\n[&lt;__main__.Parent object at 0x0000018FC5702F70&gt;]\n'-------- p[0] ----------'\n&lt;__main__.Parent object at 0x0000018FC5702F70&gt;\n{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x0000018FC5789640&gt;,\n'id': 1,\n'name': 'father'}\n2023-03-31 23:29:18,983 INFO sqlalchemy.engine.Engine SELECT child_table.id AS child_table_id, child_table.name AS child_table_name, child_table.parent_id AS child_table_parent_id \nFROM child_table \nWHERE ? = child_table.parent_id\n2023-03-31 23:29:18,983 INFO sqlalchemy.engine.Engine [generated in 0.00013s] (1,)\n2023-03-31 23:29:18,984 INFO sqlalchemy.engine.Engine DELETE FROM child_table WHERE child_table.id = ?\n2023-03-31 23:29:18,984 INFO sqlalchemy.engine.Engine [generated in 0.00014s] (1,)\n2023-03-31 23:29:18,986 INFO sqlalchemy.engine.Engine DELETE FROM parent_table WHERE parent_table.id = ?\n2023-03-31 23:29:18,986 INFO sqlalchemy.engine.Engine [generated in 0.00011s] (1,)\n2023-03-31 23:29:18,986 INFO sqlalchemy.engine.Engine COMMIT\n2023-03-31 23:29:18,989 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-03-31 23:29:18,989 INFO sqlalchemy.engine.Engine SELECT parent_table.id AS parent_table_id, parent_table.name AS parent_table_name \nFROM parent_table\n2023-03-31 23:29:18,989 INFO sqlalchemy.engine.Engine [cached since 0.008214s ago] ()\n'-------- p ----------'\n[]\n2023-03-31 23:29:18,990 INFO sqlalchemy.engine.Engine SELECT child_table.id AS child_table_id, child_table.name AS child_table_name, child_table.parent_id AS child_table_parent_id \nFROM child_table\n2023-03-31 23:29:18,990 INFO sqlalchemy.engine.Engine [generated in 0.00009s] ()\n'-------- c ----------'\n[]\n\nProcess finished with exit code 0\n</code></pre>"},{"location":"5_0_transaction/","title":"5.0 Transaction","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>detail</p>"},{"location":"5_0_transaction/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nnew_user = User(id='5', name='LILY')\nsession.add(new_user)\nsession.commit()\nuser = session.query(User).filter(User.id=='5').one()\nprint('type:', type(user))\nprint('name:', user.name)\nsession.close()\n</code></pre>"},{"location":"5_0_transaction/#output","title":"Output","text":"<pre><code>2023-04-01 22:50:03,619 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:50:03,619 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-04-01 22:50:03,619 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:50:03,619 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-04-01 22:50:03,619 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:50:03,620 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-04-01 22:50:03,620 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()\n2023-04-01 22:50:03,620 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 22:50:03,621 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:50:03,621 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-04-01 22:50:03,621 INFO sqlalchemy.engine.Engine [generated in 0.00011s] [('5', 'Bob'), ('5', 'LILY')]\nTraceback (most recent call last):\nFile \"C:\\Users\\fannnqin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sqlalchemy\\engine\\base.py\", line 1933, in _exec_single_context\n2023-04-01 22:50:03,622 INFO sqlalchemy.engine.Engine ROLLBACK\n    self.dialect.do_executemany(\nFile \"C:\\Users\\fannnqin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sqlalchemy\\engine\\default.py\", line 745, in do_executemany\n    cursor.executemany(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: user.id\n\nThe above exception was the direct cause of the following exception:\n</code></pre>"},{"location":"5_1_transaction_rollback/","title":"5.1 Transaction Rollback","text":"<p>For full documentation visit sqlalchemy.org.</p> <p>detail</p>"},{"location":"5_1_transaction_rollback/#code","title":"Code","text":"<pre><code>from pprint import pprint\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass User(Base):\n__tablename__ = 'user'\nid = Column(String(20), primary_key=True)\nname = Column(String(20))\n# using sqlite memory mode\nengine = create_engine(\"sqlite://\", echo=True)\n# using sqlite file mode\n#engine = create_engine(\"sqlite:///./file.db\", echo=True)\nBase.metadata.create_all(engine)\nsession = sessionmaker(bind=engine)()\nnew_user = User(id='5', name='Bob')\nsession.add(new_user)\nnew_user = User(id='5', name='LILY')\nsession.add(new_user)\nsession.rollback()\nnew_user = User(id='7', name='hanmeimei')\nsession.add(new_user)\nsession.commit()\nuser = session.query(User).filter(User.id=='7').one()\nprint('type:', type(user))\nprint('name:', user.name)\nsession.close()\n</code></pre>"},{"location":"5_1_transaction_rollback/#output","title":"Output","text":"<pre><code>2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"user\")\n2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"user\")\n2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine [raw sql] ()\n2023-04-01 22:57:38,618 INFO sqlalchemy.engine.Engine \nCREATE TABLE user (\n    id VARCHAR(20) NOT NULL, \n    name VARCHAR(20), \n    PRIMARY KEY (id)\n)\n\n\n2023-04-01 22:57:38,619 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()\n2023-04-01 22:57:38,619 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 22:57:38,619 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:57:38,620 INFO sqlalchemy.engine.Engine INSERT INTO user (id, name) VALUES (?, ?)\n2023-04-01 22:57:38,620 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('7', 'hanmeimei')\n2023-04-01 22:57:38,621 INFO sqlalchemy.engine.Engine COMMIT\n2023-04-01 22:57:38,621 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n2023-04-01 22:57:38,622 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name \nFROM user \nWHERE user.id = ?\n2023-04-01 22:57:38,622 INFO sqlalchemy.engine.Engine [generated in 0.00009s] ('7',)\ntype: &lt;class '__main__.User'&gt;\nname: hanmeimei\n2023-04-01 22:57:38,622 INFO sqlalchemy.engine.Engine ROLLBACK\n\nProcess finished with exit code 0\n</code></pre>"}]}